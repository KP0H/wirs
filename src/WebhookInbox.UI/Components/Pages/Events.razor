@page "/events"
@inject ApiClient Api
@inject NavigationManager Navigation

<PageTitle>Events</PageTitle>

<h1 class="mb-4">Events</h1>

@if (!string.IsNullOrEmpty(_error))
{
    <div class="alert alert-danger" role="alert">@_error</div>
}
else if (_isLoading)
{
    <p>Loading events...</p>
}
else if (_items.Count == 0)
{
    <p>No events yet. Once the inbox receives webhooks they will appear here.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped align-middle">
            <thead>
                <tr>
                    <th scope="col">Received</th>
                    <th scope="col">Source</th>
                    <th scope="col">Status</th>
                    <th scope="col">Signature</th>
                    <th scope="col" class="text-end">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in _items)
                {
                    <tr>
                        <td>@item.ReceivedAt.ToLocalTime().ToString("g")</td>
                        <td>@item.Source</td>
                        <td>@item.Status</td>
                        <td>@item.SignatureStatus</td>
                        <td class="text-end">
                            <button class="btn btn-sm btn-primary" @onclick="() => NavigateToDetails(item.Id)">Details</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-3">
        <div>
            Showing @((_items.Count == 0 ? 0 : ((_page - 1) * _pageSize + 1))) - @(((_page - 1) * _pageSize) + _items.Count) of @_total
        </div>
        <div class="btn-group">
            <button class="btn btn-outline-secondary" @onclick="PreviousPage" disabled="@(!_hasPrevious)">Previous</button>
            <button class="btn btn-outline-secondary" @onclick="NextPage" disabled="@(!_hasNext)">Next</button>
        </div>
    </div>
}

@code {
    private readonly List<EventListItem> _items = new();
    private bool _isLoading = true;
    private string? _error;
    private int _page = 1;
    private int _pageSize = 25;
    private int _total;
    private bool _hasNext;
    private bool _hasPrevious;

    protected override async Task OnInitializedAsync()
    {
        await LoadPageAsync(1);
    }

    private async Task LoadPageAsync(int page)
    {
        _isLoading = true;
        _error = null;
        StateHasChanged();

        try
        {
            var result = await Api.GetEventsAsync(page, _pageSize);
            _items.Clear();
            _items.AddRange(result.Items);

            _page = result.Page;
            _pageSize = result.PageSize;
            _total = result.Total;
            _hasPrevious = _page > 1;
            _hasNext = _page * _pageSize < _total;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task NextPage()
    {
        if (_hasNext)
        {
            await LoadPageAsync(_page + 1);
        }
    }

    private async Task PreviousPage()
    {
        if (_hasPrevious)
        {
            await LoadPageAsync(_page - 1);
        }
    }

    private void NavigateToDetails(Guid id)
    {
        Navigation.NavigateTo($"/events/{id}");
    }
}
